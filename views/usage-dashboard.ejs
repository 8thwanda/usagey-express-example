<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('partials/head', { title }) %>
</head>
<body>
  <%- include('partials/header') %>

  <div class="container mx-auto px-4 py-8">
    <div class="mb-8">
      <h1 class="text-3xl font-bold mb-4">Usage Dashboard</h1>
      <p class="text-gray-600">
        <% if (events.length === 0) { %>
          Example dashboard with mock data to demonstrate Usagey analytics capabilities.
        <% } else { %>
          Real-time view of your usage metrics tracked with Usagey.
        <% } %>
      </p>
      
      <% if (events.length === 0 && !error) { %>
        <div class="mt-2 text-sm text-gray-500">
          Note: This is sample data. Track real events from the Usage Tracking page to see your actual data.
        </div>
      <% } %>
    </div>

    <% if (error) { %>
      <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6">
        <p class="text-red-700 font-medium">Error</p>
        <p class="text-red-500"><%= error %></p>
      </div>
    <% } %>

    <!-- Usage Progress Bar -->
    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200 mb-8">
      <h2 class="text-xl font-semibold mb-4">Usage Overview</h2>
      <div class="flex flex-col md:flex-row md:items-center gap-8">
        <div class="flex-1">
          <div class="flex justify-between mb-2">
            <span class="text-sm font-medium text-gray-500">
              <%= stats.currentUsage %> / <%= stats.limit %> units
            </span>
            <span class="text-sm font-medium text-gray-500">
              <%= stats.percentage %>%
            </span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-4">
            <div 
              class="bg-blue-600 h-4 rounded-full" 
              style="width: <%= stats.percentage %>%"
            ></div>
          </div>
        </div>

        <div class="flex flex-col items-center justify-center">
          <span class="text-xl font-bold">
            <%= stats.plan %>
          </span>
          <span class="text-sm text-gray-500">Current Plan</span>
        </div>
      </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
      <!-- Daily Usage Chart -->
      <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
        <h2 class="text-xl font-semibold mb-4">Daily Usage</h2>
        <div style="position: relative; min-height: 288px;">
          <canvas id="dailyUsageChart"></canvas>
        </div>
      </div>

      <!-- Event Type Distribution -->
      <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
        <h2 class="text-xl font-semibold mb-4">Event Type Distribution</h2>
        <div style="position: relative; min-height: 288px;">
          <canvas id="eventTypeChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Recent Events Table -->
    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
      <h2 class="text-xl font-semibold mb-4">Recent Events</h2>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Event Type
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Quantity
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Timestamp
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Metadata
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <% if (events.length > 0) { %>
              <% events.forEach((event, index) => { %>
                <tr class="<%= index % 2 === 0 ? 'bg-white' : 'bg-gray-50' %>">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <span class="bg-blue-100 text-blue-800 px-2.5 py-0.5 rounded-full text-xs font-medium">
                      <%= event.eventType %>
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <%= event.quantity %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <%= new Date(event.timestamp).toLocaleString() %>
                  </td>
                  <td class="px-6 py-4 text-sm text-gray-500">
                    <pre class="text-xs bg-gray-50 p-2 rounded overflow-x-auto"><%= JSON.stringify(event.metadata || {}, null, 2) %></pre>
                  </td>
                </tr>
              <% }); %>
            <% } else { %>
              <!-- Mock data if no real events -->
              <% 
                const mockEvents = [
                  { eventType: 'api_call', quantity: 1, timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(), metadata: { endpoint: '/users', method: 'GET' } },
                  { eventType: 'data_processing', quantity: 5, timestamp: new Date(Date.now() - 1000 * 60 * 10).toISOString(), metadata: { size: '2.5MB' } },
                  { eventType: 'storage', quantity: 10, timestamp: new Date(Date.now() - 1000 * 60 * 15).toISOString(), metadata: { fileCount: 3 } },
                  { eventType: 'api_call', quantity: 1, timestamp: new Date(Date.now() - 1000 * 60 * 20).toISOString(), metadata: { endpoint: '/products', method: 'POST' } },
                  { eventType: 'compute', quantity: 3, timestamp: new Date(Date.now() - 1000 * 60 * 25).toISOString(), metadata: { duration: '5m' } },
                ];
              %>
              <% mockEvents.forEach((event, index) => { %>
                <tr class="<%= index % 2 === 0 ? 'bg-white' : 'bg-gray-50' %>">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <span class="bg-blue-100 text-blue-800 px-2.5 py-0.5 rounded-full text-xs font-medium">
                      <%= event.eventType %>
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <%= event.quantity %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <%= new Date(event.timestamp).toLocaleString() %>
                  </td>
                  <td class="px-6 py-4 text-sm text-gray-500">
                    <pre class="text-xs bg-gray-50 p-2 rounded overflow-x-auto"><%= JSON.stringify(event.metadata, null, 2) %></pre>
                  </td>
                </tr>
              <% }); %>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <%- include('partials/footer') %>

  <!-- Load Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Data for charts
      <% 
        // Prepare data for charts
        let eventTypeData, dailyUsageData;
        
        if (events.length > 0) {
          // Process real data for event type chart
          const eventTypeCounts = {};
          events.forEach(event => {
            eventTypeCounts[event.eventType] = (eventTypeCounts[event.eventType] || 0) + event.quantity;
          });
          
          eventTypeData = Object.entries(eventTypeCounts).map(([type, count]) => ({
            label: type,
            value: count
          }));
          
          // Process real data for daily usage chart
          const dailyCounts = {};
          const now = new Date();
          
          // Initialize last 7 days
          for (let i = 6; i >= 0; i--) {
            const date = new Date(now);
            date.setDate(date.getDate() - i);
            const dateStr = date.toISOString().split('T')[0];
            dailyCounts[dateStr] = 0;
          }
          
          // Fill with actual data
          events.forEach(event => {
            const date = new Date(event.timestamp).toISOString().split('T')[0];
            if (dailyCounts[date] !== undefined) {
              dailyCounts[date] += event.quantity;
            }
          });
          
          dailyUsageData = Object.entries(dailyCounts).map(([date, count]) => {
            return {
              label: new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
              value: count
            };
          });
        } else {
          // Mock data for charts
          eventTypeData = [
            { label: 'api_call', value: 312 },
            { label: 'data_processing', value: 86 },
            { label: 'storage', value: 42 },
            { label: 'compute', value: 45 }
          ];
          
          dailyUsageData = [
            { label: 'Jun 22', value: 65 },
            { label: 'Jun 23', value: 78 },
            { label: 'Jun 24', value: 62 },
            { label: 'Jun 25', value: 80 },
            { label: 'Jun 26', value: 95 },
            { label: 'Jun 27', value: 58 },
            { label: 'Jun 28', value: 47 }
          ];
        }
      %>
      
      // Event Type Pie Chart
      const eventTypeCtx = document.getElementById('eventTypeChart').getContext('2d');
      const eventTypeChart = new Chart(eventTypeCtx, {
        type: 'pie',
        data: {
          labels: <%- JSON.stringify(eventTypeData.map(d => d.label)) %>,
          datasets: [{
            data: <%- JSON.stringify(eventTypeData.map(d => d.value)) %>,
            backgroundColor: [
              '#3b82f6',
              '#10b981',
              '#f59e0b',
              '#ef4444',
              '#8b5cf6'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'right',
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.raw || 0;
                  const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
      
      // Daily Usage Bar Chart
      const dailyUsageCtx = document.getElementById('dailyUsageChart').getContext('2d');
      const dailyUsageChart = new Chart(dailyUsageCtx, {
        type: 'bar',
        data: {
          labels: <%- JSON.stringify(dailyUsageData.map(d => d.label)) %>,
          datasets: [{
            label: 'Usage Units',
            data: <%- JSON.stringify(dailyUsageData.map(d => d.value)) %>,
            backgroundColor: 'rgba(59, 130, 246, 0.7)',
            borderColor: 'rgba(59, 130, 246, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    });
  </script>
</body>
</html>